###########################Codebasics tutorial##################################

##########Ek class banao jo ki Binary search tree represent kare###############

class BinarySearchTreeNode:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
        
        
#Yeh method child add karega        
    def add_child(self,data):
        if data == self.data:
            return "Node Already exists"
        
        if data < self.data:
        #add data in left subtree
            if self.left:   #Iska matlab hai ki left mein abhi v kuch hai.i.e ye leaf node nai hai
                #agar self k left mein nodes hain toh ham recursive function call kareng, ye                  hamein help karega to reach out at the end of tree node 
                self.left.add_child(data) #iska kaam function ko baar baar loop karna hai
            else:
                self.left=BinarySearchTreeNode(data)  #Adding a node object
        else: #In case data>self.data
            #Add data in right subtree
                if self.right:
                    #i.e agar self jo ki hamara current node hai uske right mein kuch hai toh
                    #function ko recursively call karo
                    self.right.add_child(data)
                else:
                    self.right=BinarySearchTreeNode(data)
                    
#InOrder Traversal method
    def in_order_traversal(self):
        elements=[]

        #Neeche diye gaye code ka ye matlab hai ki agar self k left mein kuch hai toh traverse karo using recursion method, har baar ke recursion mein ek list return hogi,jismein ek value hogi, usko elements list mein add karte jao

#in_order_tarversal=(visited left subtree)+(visited root)+(visited right subtree)

        #Left subtree visit
        if self.left:
            elements+=self.left.in_order_traversal()

        #Root Visit i.e the base node
        elements.append(self.data)

        #Right subtree visist
        if self.right:
            elements+=self.right.in_order_traversal()

        return elements


        

def buid_tree(elements):
    #lets start with root node
    root=BinarySearchTreeNode(elements[0])

    for i in range(1,len(elements)):
        root.add_child(elements[i])

    return root
            
# Ham main function mein ek numbers list pass kara rae jiska use kar k ham ek tree banana chahte
if __name__=='__main__':
    numbers=[17,4,1,20,9,23,18,34,18]
    numbers_tree = buid_tree(numbers)
    print(numbers_tree.in_order_traversal())