
# Python3 program to find the maximum depth of tree 
******************************************************************height of binary tree******************************************************************************************
# A binary tree node 
class Node: 

	# Constructor to create a new node 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None

# Compute the "maxDepth" of a tree -- the number of nodes 
# along the longest path from the root node down to the 
# farthest leaf node 
def maxDepth(node): 
	if node is None: 
		return 0 ;                  //In few cases we have to return -1

	else : 

		# Compute the depth of each subtree 
		lDepth = maxDepth(node.left) 
		rDepth = maxDepth(node.right) 

		# Use the larger one 
		if (lDepth > rDepth): 
			return lDepth+1
		else: 
			return rDepth+1


# Driver program to test above function 
root = Node(1) 
root.left = Node(2) 
root.right = Node(3) 
root.left.left = Node(4) 
root.left.right = Node(5) 


print ("Height of tree is %d" %(maxDepth(root))) 

# This code is contributed by Nikhil Kumar Singh(nickzuck_007) 


***************************************************************************Multiple Operations***********************************************************************************************************
Consider a list (list = []). You can perform the following commands:

insert i e: Insert integer  at position .
print: Print the list.
remove e: Delete the first occurrence of integer .
append e: Insert integer  at the end of the list.
sort: Sort the list.
pop: Pop the last element from the list.
reverse: Reverse the list.
Initialize your list and read in the value of  followed by  lines of commands where each command will be of the  types listed above. Iterate through each command in order and perform the corresponding operation on your list.
*************************************************************************************************************************************************************************************
import sys

listz=[]
main_list=[]
operations_list=[]
if __name__ == '__main__':
    N = int(input())
    for _ in range(N):
        op_vals=input()
        operations_list.append(op_vals)
def switch_case(operation):
   # print("***************")
   # print(operation)
    listz=operation.split()
   # print(listz)
    if listz[0]=="insert":
        main_list.insert(int(listz[1]),int(listz[2]))
    elif listz[0]=="print":
        print(main_list)
    elif listz[0]=="remove":
        main_list.remove(int(listz[1]))
    elif listz[0]=="append":
        main_list.append(int(listz[1]))
    elif listz[0]=="sort":
        main_list.sort()
    elif listz[0]=="reverse":
        main_list.sort(reverse=True)
    elif listz[0]=="pop":
        main_list.pop()
    else:
        pass

    #print(operations_list)
    
for each_value in operations_list:
    switch_case(each_value)
******************************************************Switch Case*************************************************************************************************************
def switch_demo(argument):
    switcher = {
        1: "January",
        2: "February",
        3: "March",
        4: "April",
        5: "May",
        6: "June",
        7: "July",
        8: "August",
        9: "September",
        10: "October",
        11: "November",
        12: "December"
    }
    print switcher.get(argument, "Invalid month")
************************************************************Dictionary*******************************************************************************************************
if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()

//"{:.2f}".format(dict[]) is used to limit the decimal place eg 3.14

var="{:.2f}".format((student_marks[query_name][0]+student_marks[query_name][1]+student_marks[query_name][2])/3)
print(var)


***************************************************************Nested List Second Elemenet Pick up**********************************************************************************
    def take_second_elem(elem):
        return elem[1]
    
    #sort lists according to second index i.e score
    list_name_score.sort(key=take_second_elem,reverse=True)
    print("******************************************************")
    min(list_name_score,key=lambda x:x[1])

************************************************* Student's lowest grade*********************************************************************************************************
if __name__ == '__main__':
    list_name_score=[]
    for _ in range(int(input())):
        name = input()
        score = float(input())
        input_in=[name,score] 
        list_name_score.append(input_in)
    
        
   # list_name_score=([i,j] for i in name for j in score)
   # for i in range(len(list_name_score)):
   #      print(list_name_score[i])
    
   
    def second_element(elem):
        return elem[1] 
    
    list_name_score.sort(key=lambda x:x[1])
    min_score=list_name_score[0][1]
    #print(min_score)
    second_min_score=list_name_score[1][1]

    a=[]

    for i in range(len(list_name_score)):
        for j in range(2):
            #print(str(i)+":"+str(j))
                if(second_min_score==list_name_score[i][j]):
                       # print(str(i)+":"+str(j))
                        a.append(list_name_score[i][0])
                        
              
                else:
                    pass
a.sort()
for k in a:
    print(k)

*******************************************************************Sorting Tutorial************************************************************************************************
https://www.programiz.com/python-programming/methods/list/sort
********************************************************************map,list,set,second runnerup**************************************************************************************
Given the participants' score sheet for your University Sports Day, you are required to find the runner-up score. You are given  scores. Store them in a list and find the score of the runner-up.

Input Format

The first line contains . The second line contains an array   of  integers each separated by a space.

Constraints

Output Format

Print the runner-up score.

Sample Input 0

5
2 3 6 6 5
Sample Output 0

5
Explanation 0

Given list is . The maximum score is , second maximum is . Hence, we print  as the runner-up score.


********************************************************************Solution*************************************************************************

if __name__ == '__main__':
    n = int(input())
    arr = list(map(int, input().split()))
    set_list=set(arr)
    listz=list(set_list)
  #  print(listz)
    print(listz[-2])
        
    
##############################################################################################################
Let's learn about list comprehensions! You are given three integers  and  representing the dimensions of a cuboid along with an integer . Print a list of all possible coordinates given by  on a 3D grid where the sum of  is not equal to . Here, . Please use list comprehensions rather than multiple loops, as a learning exercise.
Topic:List
**Example**
All permutations of  are:
.

Print an array of the elements that do not sum to .


Input Format

Four integers  and , each on a separate line.

Constraints

Print the list in lexicographic increasing order.

Sample Input 0

1
1
1
2
Sample Output 0

[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]
Explanation 0

Each variable  and  will have values of  or . All permutations of lists in the form .
Remove all arrays that sum to  to leave only the valid permutations.

Sample Input 1

2
2
2
2
Sample Output 1

[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]
Solution:
*********************************************************************************************************
if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())

    list_created=([[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1)])
    list_modified=[]
    print(list_created)
    for o in range(len(list_created)):
        tmp=0
        for p in range(3):
           # print(str(o)+":"+str(p))
            print("******************")
            print(list_created[o][p])
            print("******************")
            tmp=tmp+list_created[o][p]
        if(tmp==n):
                pass
        else:
                list_modified.append(list_created[m])
print("*******************Answer**********************************")
print(list_modified)
print("*****************************************************")

    
    

###########################################################To print the elements of a list in single line without any spaces#################################################
print(a[val],end="") //Ye kewal list mein kaam karta hai
python 2 mein ek aasan tarika hai: 
print root.info, //yeh comma lagana zaroori hat, tabhi single line mein print karega
############################################################ Take a leap year and print #####################################################################################
def is_leap(year):
    leap = False
    
    # Write your logic here
	'''Yahan ye dekh sakte ki kaise ye expressions boolean value return kar rae''
    return year % 4 == 0 and (year % 400 == 0 or year % 100 != 0)
year = int(input())
############################################################Inserting nodes in Binary Tree###################################################################################
class Node:
    
    def __init__(self,input):
        self.value=input
        self.left=None
        self.right=None
        self.level=0
        
        
    #setting getters and setters in python
    def get_value(self):
        return self.value
    def get_left(self):
        return self.left
    def get_right(self):
        return self.right
    
    #Setting setters now in python
    
    #value k liye waise setter ki zaroorat nai,kyunki isko ham constructor k through initialize karte hain
    def set_value(self,value):
        self.value=value
        
    def set_left(self,left):
        self.left=left
        
    def set_right(self,right):
        self.right=right
    
#Lets create methods which we will use for operations
#Badi der tak fasa rahan main kyunki = aur == ke beech antar hai '=' value assign karta hai
#Jabki '==' dono value ko check karta hai ki same hai ya nai

''' Insertion ka logic ye hai ki ek function banao jisme ek object pass karao aur e;k naya object jo ki usmein ghuserna hai, jaise insert(current_node_object,new_node_object) ab check karo ki

        1)Agar root node hi null hai, toh new node ki value ko current node mein pass kara do.
        2)Agar new_node_object ki value kam hai current node object ki value se toh check karo ki current_node_object ka left element null hai ya nai, agar null nai hai toh value fir se insert wala function call karo but abki baar left side pe yaani insert(object_passed.left,current_node_object)
        3)same cheez left side ke case mein karo accordingly'''



def insert(object_passed,node):
   # print(object_passed)
    if object_passed is None:
        print("##############")
        object_passed=node
        print("value inserted")
        print("##############")
    else:
        if node.value < object_passed.value:
            if object_passed.left is None:
                print("Node Inserted at left side")
                object_passed.left=node
            else:
                insert(object_passed.left,node)
        elif node.value > object_passed.value:
            if object_passed.right is None:
                print("Node Inserted at right side")
                object_passed.right=node
            else:
                insert(object_passed.right,node)
        else:
            print("not able to insert the value")       
             
        
            
        
    
    def find(self,value):
        if self.value==value:
            a.append(0) 
            print("Root node of value "+str(self.value)+" level is "+str(sum(a)))
        elif (value < self.value and self.left != None):
            a.append(1)
            print("I am in left subtree")
            self.left.find(value)
        elif (value > self.value and self.right != None):
            print("I am in right subtree")
            a.append(1)
            self.right.find(value)
        else:
             print("hello")
        return a[-1]
        

    
    def delete(self,value):
        pass

def InOrder(root):
    # code here

    if root:
        
        InOrder(root.left)
        print(root.value)
        InOrder(root.right)



def PreOrder(root):
    # code here

    if root:
        print(root.value)
        PreOrder(root.left)
        PreOrder(root.right)  
    
    # Now lets create object of Node class
    
#Object jo initialise hua wo bas itne se huye    
object=Node(52)
insert(object,Node(86))
print("****************InOrder************************")
InOrder(object)
print("****************PreOrder******************")
PreOrder(object)


#object.left=Node(33)
#object.left.left=Node(25)
#object.left.right=Node(39)
#object.right=Node(65)
#object.right.left=Node(60)
#object.right.right=Node(78)
a=[] #variable to store the level at which element exists

#object.find(60)
##Insert ke case mein hamein ye karna hai ki jo object bana hai usmein ek element ghuserna parega, iske liye hamein do arguments ki zarurat paregi jisme ek argument hoga woh object  aur doosri wo node jo hamein ghuserni hai

#object.left.set_value(37)





************************************************************Finding an element in Binary Tree*********************************************
class Node:
    
    def __init__(self,input):
        self.value=input
        self.left=None
        self.right=None
        self.level=0
        
        
    #setting getters and setters in python
    def get_value(self):
        return self.value
    def get_left(self):
        return self.left
    def get_right(self):
        return self.right
    
    #Setting setters now in python
    
    #value k liye waise setter ki zaroorat nai,kyunki isko ham constructor k through initialize karte hain
    def set_value(self,value):
        self.value=value
        
    def set_left(self,left):
        self.left=left
        
    def set_right(self,right):
        self.right=right
    
    #Lets create methods which we will use for operations
    def insert(self,value):
        pass
    
    def find(self,value):
        if self.value==value:
            a.append(0) 
            print("Root node of value "+str(self.value)+" level is "+str(sum(a)))
           # return value
        elif (value < self.value and self.left != None):
            a.append(1)
            print("I am in left subtree")
            return self.left.find(value)
        elif (value > self.value and self.right != None):
            print("I am in right subtree")
            a.append(1)
            self.right.find(value)
        else:
            return "hello"
        
            
    
    def delete(self,value):
        pass

    
    
    
    # Now lets create object of Node class
    
    
object=Node(52)

object.left=Node(33)
object.left.left=Node(25)
object.left.right=Node(39)
object.right=Node(65)
object.right.left=Node(60)
object.right.right=Node(78)
a=[] #variable to store the level at which element exists

object.find(60)


************************************************************** Palindrome program which works for ****************

class palindrome_checker_class:
    def __init__(self,input):
        self.input=input
        
#Palindrome Checker Method
    def palindromeChecker(self,input):
        pass
        print(input)
        #tmp=input
        #tmp.reverse()
		#.reverse() wala eke naya variable nai banata, jisse logic mein issue aa ra isliye [::-1] use karo
        
        reversed=input[::-1]
        print(reversed)
  #      reversed.reverse()
        
        ########The below code is good for numeric input'################
        '''  
        if(reversed == input):
            print("Its a palindrome baby")
        else:
            print("Sorry Babe, Its not a palindrome ok") 
        '''
        #################################################################
        a=0
        for i in range(0,len(input)):
                print(str(i)+':'+str(i))
                print(input)
                print(reversed)
                if input[i]==reversed[i]:
                    a+=1
                    print(a)
                else
                    pass
        
        print(a)
        if a==len(input):
            print("Its a palindrome")
        else:
            print("Sorry its not a palin")
        ##########################Above logic doesnt work#################
        
            
list_input=[2,1,2]
string_key="mnm"
#list_input=list(string_key)
print("************")
print(list_input)
print("************")
object=palindrome_checker_class(list_input)
object.palindromeChecker(list_input)

******************************************************************* QUEUE **************************************************************************************************

class Queue:
        def __init__(self,input):
            self.input=input
        
#Pahla method koi bhi element list mein aage ki taraf ghuserne k liye

        def enqu(self,input):
            inputz.append(input)
            

        #Doosra method koi bhi element remove k liye
        def dequ(self,input):
            inputz.pop(input)


inputz=[2,3,4,5]
object=Queue(inputz)
object.enqu(8)
object.dequ(0)
print(inputz)



****************************************************************** STACK ****************************************************************************************************
class Stack:
    
    ####Ab jaise ki stack built in data structure nai hai, but usse milta julta ek data structure python mein built in hota hai, which is called
    def __init__(self,listz):
        #self.items=[]
        self.listz=listz
        
    ## Function to insert an element/item on top of the stack ##
    def push(self,item):
        pass  #pass ek keyword hai jo hamein ye remind karata hai ki hamein ye logic likhne k liye dobara ana parega
        """ Since element hamesha akhri se hi nikalna hai aur add karna hai iska 
        runtime constant hoga i.e o(1)"""
        self.listz.append(item)
        print(listz)
        ## Function to remove an element/item on top of the stack ##
        ## Chaho toh function mein se item hata sakte hain kyunki any way bydefault last wala element jo ki top pe hai usi ko remove hona hai
    def pop(self):
        pass  #pass ek keyword hai jo hamein ye remind karata hai ki hamein ye logic likhne k liye dobara ana parega
        self.listz.remove(listz[object.size()-1])
        print(listz)

    
    ## peek wala function ye batayega ki wo kon sa last element hai jo ab pop operation chalane k baad remove ho jayega
    def peek(self):
        print(str(object.size())+' size of stack is')
        
    
## ye wala function size batayega stack ka, ki kitne element hain
    def size(self):
        return len(self.listz)
        
## ye wala function ye batayega ki stack mein koi element hai ya fir khali hai
    def is_empty(self):
        if(len(listz)==0):
            print("Track is empty")
        else:
            print("Track is not empty")

listz=[3,5,1,2,3,6,8]
object=Stack(listz)
object.push(4)
object.size()
object.peek()
object.pop()
object.is_empty()
print(listz)



******************************************************************************************************************************************************************************

#User function Template for python3

# Node Class:
class Node:
    def __init__(self,key):
        self.left = None
        self.right = None
        self.value = key


# Return a list containing the inorder traversal of the given tree
def InOrder(root):
    # code here

    if root:
        
        InOrder(root.left)
        print(root.value)
        InOrder(root.right)

root = Node(10)
root.left = Node(20)
root.right = Node(30)
root.left.left = Node(40)
root.left.right=Node(60)
root.right.left=Node(50)

InOrder(root)

o/p=
40
20
60
10
50
30

##############################################################PreOrder Traversal,PostOrder Traversal,Inorder Traversal###################################################


#Python program for tree traversal

class Node:
    def __init__(self,key):
        self.left=None
        self.right=None
        self.val=key
        

#a Function to do preorder traversal
def printPreorder(root):
    
    if root:
        

        
        #print the data of the node
        print(root.val),
        
        #First recur on left child
        printInorder(root.left)
        
        #now recur on the right child
        printInorder(root.right)
        
        
#a Function to do inorder tree traversal
def printInorder(root):
    
    if root:
        
        #First recur on left child
        printInorder(root.left)
        
        #print the data of the node
        print(root.val),
        
        #now recur on the right child
        printInorder(root.right)
        

        #a Function to do preorder traversal

def printPostorder(root):
    
    if root:
        
        
        #First recur on left child
        printInorder(root.left)
        
        #now recur on the right child
        printInorder(root.right)
        
                        
        #print the data of the node
        print(root.val),
        

        
# Driver code 
root = Node(1) 
root.left      = Node(2) 
root.right     = Node(3) 
root.left.left  = Node(4) 
root.left.right  = Node(5) 
print("Preorder traversal of binary tree is")
printPreorder(root) 
  
print("\nInorder traversal of binary tree is")
printInorder(root) 
  
print("\nPostorder traversal of binary tree is")
printPostorder(root)                 


########################################################################################################################################

def say_hello():
    a=[10,2,8,6,7,3]
    #a.sort()
    for i in str(len(a)):
        for j in str(len(a)-1):
            print(i)
            print(j)
    print(a)    
#for i in range(5):
say_hello()



***********************************************Bubble Sort************************************************
***********************************************To Print in ascending order*********************************
from array import *



def say_hello(a):
 #   print('Hello, World')

             for i in range(0,len(a)):
                    for j in range(0,len(a)-1,1):
                            if a[j] > a[j+1]:    //To print in descending order a[j] < a[j+1])

                                   temp=a[j]
                                   a[j]=a[j+1]
                                   a[j+1]=temp
                                   print(a)
    
    
        
    
                   
a=array('i',[10,2,4,7,1,3])
say_hello(a)
print(a)
****************************************************************************************************************


******************************************SELECTION SORT IN DESCENDING MODE**************************************
from array import *



def say_hello(a):
 #   print('Hello, World')

             for i in range(0,len(a)):
                    for j in range(i,len(a)):
                            if a[i] < a[j]:    //To print in ascending order a[j] > a[j+1]

                                   print(i)
                                   print(j)
                                   temp=a[j]
                                   a[j]=a[i]
                                   a[i]=temp
                                   print(a)
    
            
    
                   
a=array('i',[10,2,4,7,1,3])
say_hello(a)
print(a)
******************************************************************************************************************************

*********************************************Insertion Sort*******************************************************************
from array import *


def say_hello(a):
    #   print('Hello, World')

    for i in range(0,len(a)):
        current=a[i]
        j=i-1
        while (j>=0 and a[j]>=current):
            a[j+1]=a[j]
            j=j-1

        a[j+1]=current




a = array('i', [10, 2, 4, 7, 1, 3])
say_hello(a)
print(a)

*********************************************************************************************************************************

**************************************Searching an element in ordered array*********************************************************
from array import *

a=array('i',[3,20,45,55,32,75,87,43,12,60])

def say_hello(a):
  #  print('Hello, World')
    
    ############# First lets start with sorting the unsorted array #############
    
    for i in range(0,len(a),1):
        for j in range(0,len(a)-1,1):
            
            if a[j]>a[j+1]:
                
                temp=a[j]
                a[j]=a[j+1]
                a[j+1]=temp


    
    

    
say_hello(a)
print(a)

   #  Hence now when the array is sorted out lets start out searching the element   #

    #Lets use the binary search algo
    
    

    
min_index=int(len(a)/2)
#print(min_index)
#print(a[min_index])


while(a[min_index] != 60):
    
    if(60 > a[min_index]):
        min_index=int((int(len(a))+min_index)/2)
        print(min_index)
        print(a[min_index])
    elif(60 < a[min_index]):
        print("Logic is pending")
    else:
        print("Not present")


print(str(min_index)+" is the index position for 60 ")
         
***************************************************************************************************







    