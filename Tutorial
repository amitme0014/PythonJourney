
******************************************String methods************************************************************************************************
str.isalnum()
This method checks if all the characters of a string are alphanumeric (a-z, A-Z and 0-9).

>>> print 'ab123'.isalnum()
True
>>> print 'ab123#'.isalnum()
False
str.isalpha()
This method checks if all the characters of a string are alphabetical (a-z and A-Z).

>>> print 'abcD'.isalpha()
True
>>> print 'abcd1'.isalpha()
False
str.isdigit()
This method checks if all the characters of a string are digits (0-9).

>>> print '1234'.isdigit()
True
>>> print '123edsd'.isdigit()
False
str.islower()
This method checks if all the characters of a string are lowercase characters (a-z).

>>> print 'abcd123#'.islower()
True
>>> print 'Abcd123#'.islower()
False
str.isupper()
This method checks if all the characters of a string are uppercase characters (A-Z).

>>> print 'ABCD123#'.isupper()
True
>>> print 'Abcd123#'.isupper()
False
**********************************************Any and all function in python*****************************************************
list=[1,2,3,4,5,6,7]
any(i <5 for i in list)  //ye true return karega agar list mein koi bhi item hoga jo ki 5 se kam hoga
all(i <5 for i in list)  // Ye True return karega agar list mein sabhi item 5 se chote honge
********************************************************Eval function in python**************************************************************************
a=eval(print(13))
evaluate kar k value assign kar deta hai
a=eval(sys.argv[1]) //Command line se pahla argument lo
eval("")
**********************************************Finding sub string within string using sliding loop*********************************
def count_substring(string, sub_string):
    list=[]
    count=0
    
    split_string=[]
    split_string[:]=string
    print(split_string)
    
    split_sub_string=[]
    split_sub_string[:]=sub_string
    print(split_sub_string)
    
    ##Implementing sliding window method
    
    for i in range(len(split_string)-len(split_sub_string)+1):
        print("Range of n-k+1 is: "+str(i))
        for j in range(len(split_sub_string)):
            print(str(i)+"+"+str(j)+"="+str(i+j)+" is index")
            list.append(split_string[i+j])
        print(list)
        if(list==split_sub_string):
            count+=1
        else:
            pass
        list.clear()
            
    return count

if __name__ == '__main__':
    '''string = input().strip()
    sub_string = input().strip()'''
    
    string="ABCDCDC"
    sub_string="CDC"
    
    count = count_substring(string, sub_string)
    print(count)
***************************************************sliding window  Geeks for geeks*****************
# O(n * k) solution for finding 
# maximum sum of a subarray of size k 
import sys 
INT_MIN = -sys.maxsize -1

# Returns maximum sum in a 
# subarray of size k. 
def maxSum(arr, n, k): 
    
    # Initialize result 
    max_sum = INT_MIN 

    # Consider all blocks 
    # starting with i. 
    for i in range(n - k + 1):
        print("range of n-k+1"+":"+str(i))
        current_sum = 0
        for j in range(k): 
            print(str(i)+":"+str(j)+"="+str(i+j)+":"+"Index")
            current_sum = current_sum + arr[i + j] 

        # Update result if required. 
        max_sum = max(current_sum, max_sum ) 

    return max_sum 

# Driver code 
arr = [1, 4, 2, 10, 2, 
        3, 1, 0, 20] 
k = 4
n = len(arr) 
print(maxSum(arr, n, k)) 

# This code is contributed by mits 

###########################Code to Convert String into Character Array################
split_string=[]
split_string[:]=string
print(split_string)
######################################################################################
split_sub_string=[]
split_sub_string[:]=sub_string
print(split_sub_string)
#####################################################################################
******************************************************ankit sir loop***********************************************************************************************************
This is kind of **************Brute Force****************************** 
 for i in range(0,len(split_string)-2,1):
        k=i
        for j in range(0,len(split_sub_string),1):
            print(str(k)+":"+str(j))
            #print(str(i)+":"+str(j))
            if 1==1:
               #print(str(k)+":"+str(j))
                k+=1
            else:
                k+=1
        
		
o/p=
0:0
1:1
2:2
1:0
2:1
3:2
2:0
3:1
4:2
3:0
4:1
5:2
4:0
5:1
6:2
******************************************************************************String ke beech mein kuch add karna********************************************************************
string = string[:5] + "k" + string[6:]
*****************************************************************************swapcase************************************************************************************************
Example 1: Swap lowercase to uppercase and vice versa using swapcase()
# example string
string = "THIS SHOULD ALL BE LOWERCASE."
print(string.swapcase())

string = "this should all be uppercase."
print(string.swapcase())

string = "ThIs ShOuLd Be MiXeD cAsEd."
print(string.swapcase())
Run Code
Output

this should all be lowercase.
THIS SHOULD ALL BE UPPERCASE.
tHiS sHoUlD bE mIxEd CaSeD.
******************************************************************************String Split and Join***********************************************************************************
def split_and_join(line):
    # write your code here
    result=line.split()
    result=("-").join(result)
    return result;

Sample Input
this is a string   

Sample Output
this-is-a-string
****************************************************************Tuples***************************************************************************************************************
Tuples are data structures that look a lot like lists. Unlike lists, tuples are immutable (meaning that they cannot be modified once created). This restricts their use because we cannot add, remove, or assign values; however, it gives us an advantage in space and time complexities.

A common tuple use is the swapping of  numbers:

a, b = b, a
Here  is a tuple, and it assigns itself the values of .

Another awesome use of tuples is as keys in a dictionary. In other words, tuples are hashable.
**************************************************************Nested List*************************************************************************************************************
A nested list is a list that contains another list (i.e.: a list of lists). It is also referred to as a multi-diminsional array. For example, a 2 dimensional array is used below:

nested_list = [['blue', 'green'], ['red', 'black'], ['blue', 'white']]
print len(nested_list)
# prints 3
print nested_list[1]
# prints ['red', 'black']
print nested_list[1][0]
# prints red
To go through every element in this list, use a nested for loop.

>>> nested_list = [['blue', 'green'], ['red', 'black'], ['blue', 'white']]
>>> for inner in nested_list:
...     for value in inner:
...         print value
... 
blue
green
red
black
blue
white

****************************************************************************************************************************************************************************************
List

Concept

You have already used lists in previous hacks. List comprehensions are an elegant way to build a list without having to use different for loops to append values one by one. These examples might help.

The simplest form of a list comprehension is:

[ expression-involving-loop-variable for loop-variable in sequence ]

This will step over every element in a sequence, successively setting the loop-variable equal to every element one at a time. It will then build up a list by evaluating the expression-involving-loop-variable for each one. This eliminates the need to use lambda forms and generally produces a much more readable code than using map() and a more compact code than using a for loop.

>> ListOfNumbers = [ x for x in range(10) ] # List of integers from 0 to 9
>> ListOfNumbers
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
List comprehensions can be nested where they take the following form:

[ expression-involving-loop-variables for outer-loop-variable in outer-sequence for inner-loop-variable in inner-sequence ]

This is equivalent to writing:

results = []
for outer_loop_variable in outer_sequence:
    for inner_loop_variable in inner_sequence:
        results.append( expression_involving_loop_variables )
For example, if you want to generate all combinations of lists  and , write:

>>> print([[x, y] for x in [1, 2, 3] for y in [4, 5, 6]])
[[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]
This is equivalent to:

>>> results = []
>>> for x in [1, 2, 3]:
...     for y in [4, 5, 6]:
...         results.append([x, y])
... 
>>> print(results)
[[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]

The final form of list comprehension involves creating a list and filtering it similar to using the filter() method. The filtering form of list comprehension takes the following form:

[ expression-involving-loop-variable for loop-variable in sequence if boolean-expression-involving-loop-variable ]

This form is similar to the simple form of list comprehension, but it evaluates boolean-expression-involving-loop-variable for every item. It also only keeps those members for which the boolean expression is True.

>> ListOfThreeMultiples = [x for x in range(10) if x % 3 == 0] # Multiples of 3 below 10
>> ListOfThreeMultiples
[0, 3, 6, 9]

***************************************************************************************MAP**************************************************************************************

python map() Function

Example
Calculate the length of each word in the tuple:

def myfunc(n):
  return len(n)

x = map(myfunc, ('apple', 'banana', 'cherry'))
Definition and Usage
The map() function executes a specified function for each item in a iterable. The item is sent to the function as a parameter.

Syntax
map(function, iterables)

Parameter	Description
function	Required. The function to execute for each item
iterable	Required. A sequence, collection or an iterator object. You can send as many iterables as you like, just make sure the function has one parameter for each iterable.